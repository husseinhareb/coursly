<?php

namespace App\Controller;

use App\Entity\User;
use App\Entity\Role;
use App\Form\RegistrationFormType;
use App\Repository\RoleRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

class RegistrationController extends AbstractController
{
    private RoleRepository $roleRepository;

    public function __construct(RoleRepository $roleRepository)
    {
        $this->roleRepository = $roleRepository;
    }

    #[Route('/admin/{username}/register', name: 'app_register')]
    #[IsGranted('ROLE_ADMIN')]
    public function register(
        Request $request,
        UserPasswordHasherInterface $passwordHasher,
        EntityManagerInterface $em
    ): Response {
        $user = new User();
        $form = $this->createForm(RegistrationFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // Hacher le mot de passe généré automatiquement
            $plainPassword = $form->get('plainPassword')->getData();
            $user->setPassword($passwordHasher->hashPassword($user, $plainPassword));
            $user->setPasswordAutoGenerated(true);
            // Vérifier le nom d'utilisateur
            if (!$user->getUsername()) {
                $rand = random_int(10, 999);
                $user->setUsername(
                    strtolower($user->getFirstName())
                    .'_'.strtolower($user->getLastName())
                    .$rand
                );
            }

            // Attribuer des rôles via les entités Role
            $selected = $form->get('role')->getData();
            if ($selected === 'ROLE_ADMIN_PROFESSOR') {
                $names = ['ROLE_ADMIN', 'ROLE_PROFESSOR'];
            } else {
                $names = [$selected];
            }
            foreach ($names as $roleName) {
                $role = $this->roleRepository->findOneBy(['name' => $roleName]);
                if ($role) {
                    $user->addRole($role);
                } else {
                    // Gérer éventuellement le rôle manquant : lancer une exception ou créer
                    throw $this->createNotFoundException("Role {$roleName} not found");
                }
            }

            $em->persist($user);
            $em->flush();

            return $this->redirectToRoute('app_home');
        }

        return $this->render('registration/register.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }
}
