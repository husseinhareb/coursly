<?php

namespace App\EventSubscriber;

use App\Entity\User;
use App\Entity\Role;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\RequestEvent;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class AdminUserSubscriber implements EventSubscriberInterface
{
    private EntityManagerInterface $entityManager;
    private UserPasswordHasherInterface $passwordHasher;
    private static bool $initialized = false;

    public function __construct(EntityManagerInterface $entityManager, UserPasswordHasherInterface $passwordHasher)
    {
        $this->entityManager   = $entityManager;
        $this->passwordHasher  = $passwordHasher;
    }

    public function onKernelRequest(RequestEvent $event): void
    {
        // Only run once per request cycle
        if (self::$initialized) {
            return;
        }
        self::$initialized = true;

        $em = $this->entityManager;

        // 1) Find or create the ROLE_ADMIN Role entity
        $roleRepo = $em->getRepository(Role::class);
        $adminRole = $roleRepo->findOneBy(['name' => 'ROLE_ADMIN']);
        if (!$adminRole) {
            $adminRole = new Role();
            $adminRole->setName('ROLE_ADMIN');
            $em->persist($adminRole);
            // don't flush yet, wait until after user persist
        }

        // 2) Find or create the admin user
        $adminEmail = 'admin@coursly.com';
        $userRepo   = $em->getRepository(User::class);
        $adminUser  = $userRepo->findOneBy(['email' => $adminEmail]);

        if (!$adminUser) {
            $adminUser = new User();
            $adminUser->setEmail($adminEmail);
            $adminUser->setUsername('admin_coursly');
            $adminUser->setFirstName('Admin');
            $adminUser->setLastName('User');

            // Hash and set the password
            $plainPassword   = 'admincoursly';
            $hashedPassword  = $this->passwordHasher->hashPassword($adminUser, $plainPassword);
            $adminUser->setPassword($hashedPassword);

            // Mark that this password was _not_ auto-generated
            $adminUser->setPasswordAutoGenerated(false);

            // Assign the ROLE_ADMIN role
            $adminUser->addRole($adminRole);

            $em->persist($adminUser);
        } else {
            // ensure existing admin also has the ROLE_ADMIN role
            if (!in_array('ROLE_ADMIN', $adminUser->getRoles(), true)) {
                $adminUser->addRole($adminRole);
            }
        }

        // 3) Flush both role and user in one go
        $em->flush();
    }

    public static function getSubscribedEvents(): array
    {
        return [
            'kernel.request' => ['onKernelRequest', 0],
        ];
    }
}
